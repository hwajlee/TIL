## 브랜치(branch)
---

### 개념 
- 이름 그대로 **가지**라는 의미 
- 첫 브랜치는 자동으로 master라는 이름으로 시작되며, 후술된 명령을 통해 브랜치를 생성하고, 포인터를 변경하는 등 제어가 가능 

### branch
브랜치를 생성, 삭제, 조회

```
$ git branch              # 생성된 브랜치명 확인 
$ git branch -M <브랜치명> # 브랜치 생성 
$ git branch -a <브랜치명> # 브랜치 삭제 
```

### HEAD(포인터) 변경 
생성된 브랜치를 가리키는 **포인터(HEAD)**를 변경
```
$ git checkout new branch  # git switch new branch와 동일
$ git switch -c new branch # 브랜치가 없으면 만들면서 스위치 
# git branch -v            # 생성된 브랜치명 자세히 확인 
```

### Merge 
브랜치를 병합하는 것. 이때, 병합의 기준은 경우의 수에 따라 달라짐 

* Merge 시나리오 
1. Fast Forward
2. Automatic Merge
3. CONFLICT => Manual commit 
 


| 시나리오 종류    | 설명   |
| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Fast Forward(FF) | 브랜치 개념의 그림과 같은 상황이다. 병합을 원하는 분기의 커밋수만 차이날때 적용된다. |
| Automatic Merge  | FF 시나리오에서 자기자신(분기)에도 커밋이 일어났지만, 병합 대상 분기의 내용과 겹치는게 없을때 발생한다. <br> 이 경우에도 FF와 같이 사용자가 특별히 수정해야할 사항은 없다. |
| CONFLICT         | 병합이 될 두 분기의 커밋수도 차이나고, 그 커밋에서 겹치는 내용이 존재할 때 발생한다. 이 경우, git이 개입할 수 없어 병합 조건을 사용자에게 정하게 한다. <br> 조건은 아래와 같이 네 가지 경우의 수가 존재한다. <br> - income 분기(병합되어질)의 내용만 merge 한다. <br> - 병합대상 분기의 내용만 merge한다. <br> - 두 분기의 내용을 전부 포함시킨다. 

### 사용법 
```
$ git merge new_branch
$ git log --oneline --graph # 깃 commit 로그를 자세히 출력 
``` 

---
### 깃허브 리포지토리 연결 (remote)
원격 저장소 생성. git remote add `<name>` `<url>`의 형태로 사용되며, URL(리포지토리)과 name(원격 저장소)을 매핑하거나 삭제 

### 사용법
```
$ git remote add <origin> 깃 레퍼 주소
$ git remote -v          # 등록된 원격 저장소 확인
$ git remote rm <origin> # 원격 저장소 삭제 
```

### clone
로컬저장소에 **아무것도 없을 때** (.git 폴더), 깃허브 레파지토리로부터 파일을 내려받는다. 
```
$ git clone 깃 레파지토리 주소
```

### push 
push 작업을 해야 비로소 커밋한 내용이 레파지토리에 올라감 
```
$ git push origin master
```

### pull
깃허브 레파지토리로부터 **갱신된 내용**을 내려받음
```
$ git pull origin master
```

## 정리
위 내용을 표로 만들어 정리하면 다음과 같다.

​
| 상황                            | 명령어                           |
| ------------------------------- | -------------------------------- |
| 집에서 새로운 프로젝트 시작     | `$ mkdir project`                |
| 프로젝트 폴더로 이동            | `$ cd project`                   |
| 리포 초기화                     | `$ git init`                     |
| README, .gitignore 생성         | `$ touch README.md .gitignore`   |
| 파일 스테이징                   | `$ git add .`                    |
| 커밋                            | `$ git commit -m 'first commit'` |
| 원격저장소 생성                 | github 사이트에서 진행           |
| 원격 저장소 등록                | `$ git remote add origin <URL>`  |
| 원격 저장소 PUSH                | `$ git push origin master`       |
| 다른 컴퓨터에서 원격저장소 복제 | `$ git clone <URL>`              |
| 작업                            | `add`, `commit`                  |
| 귀가 직전                       | `$ git push origin master`       |
| 집 도착 이후                    | `$ git pull origin master`       |
| 작업                            | `add`, `commit`                  |
| 작업 종료                       | `$ git push origin master`       |
| 다른 컴퓨터에서 반복            | `$ git pull origin master`       |

---

### 원격저장소 커밋 기록 삭제 
Git hub에는 커밋 기록이 남아, 원격 저장소 상에는 삭제했다 하더라도 기록 조회를 통해 해당 파일 확인 가능 
> 따라서 이미 올라가버린 민감한 파일 및 히스토리 삭제 필요 

#### .gitignore에 추가 
해당 파일 .gitignore에 추가 (해당 파일 확장자 전체 추가 원할시 `*.csv`와 가이 와일드 카드(*) 사용하여 추가)

#### 변경사항 github에 반영 
.gitignore에 추가 및 푸시 -> 깃허브에 해당 파일 삭제되었는 지 확인 
> 만약 파일기 건재하다면? -> 캐시 삭제 후 다시 커밋 

- **캐시 삭제**
```
$ git rm -r --cahced .
$ git add .
$ git commit -m 'rm cache'
$ git push origin master
```

#### Github history에서 삭제 
위 과정을 통해 깃허브에서 해당 파일 삭제했으나, 커밋기록까지 삭제 필요 

* 주의사항: 파일 경로 설정 제대로 할 것. 파일 경로의 기준은 현재 디렉토리( master 표시 왼쪽에 표시)가 기준 
  
1. 커밋 기록 다시 쓰기 
```
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch 경로/경로/파일명.확장자' --prune-empty --tag-name-filter cat -- --all
```
2. **성공했을 때**
   > `Ref 'refs/remotes/origin/master' was rewritten` 이렇게 뜬다.
3. **실패했을 때**
   > `'C:/Users/TECH2_01/github/DACON_Airline_Delay/test.parquet' is outside repository at` 이런식으로 경로 밖에 있다고 뜬다.


---
## 에러 

### fatal: bad object HEAD 
* 해결법 
1. .git 디렉토리 삭제 후 init 다시 생성 (git init)
2. VScode를 재시작하여 소스 제어에 아무것도 출력되지 않는 현상 해결 

### localhoset에 연결할 수 없습니다. 
`git log`를 통해 푸시 이력 확인해보고, 레파지토리에 잘 올라와 있는 지 확인(어차피 레파지토리에만 잘 올라가면 되기 때문)

---

### 참고
https://app.slack.com/client/T04DPM0NUKU/C04FEDADPU0 # 04_실시간코드
https://github.com/CatSaveTheWorld/TIL/tree/master/git